The following paper titled -- "Monitoring in the Cloud" is very good and presents a neat framework of effective monitoring through metrics and events and correlation between them
https://lp.datadoghq.com/rs/875-UVY-685/images/Monitoring_In_The_Cloud_Ebook_190806.pdf
Important points are as follows --

a. METRICS
Metrics capture a value pertaining to your systems at a specific point in time. Therefore, metrics are usually collected at regular intervals to monitor a system’s evolution over time.
  WORK METRICS
  Work metrics indicate the top-level health of your system by measuring its useful output. These metrics are invaluable for surfacing real, often user-facing issues.
  RESOURCE METRICS
  Most components of your infrastructure serve as a resource to other systems. A server’s resources include such physical components as CPU, memory, disks, and network interfaces.   But a higher-level component, such as a database or a geolocation microservice, can also be a resource if another system requires that component to produce work. Resource    
  metrics are especially valuable for investigating problems

b. EVENTS
In contrast to metrics, which are collected more or less continuously, events are discrete, infrequent occurrences. Events capture what happened, at a point in time, with   optional additional information. Some examples:
  — Changes: Code releases, builds, and build failures
  — Alerts: Notifications generated by your primary monitoring system or by third-party tools
  — Scaling events: Adding or subtracting hosts or containers
  
c. Systematic Investigation Approach
1 Start at the top with work metrics
First examine the work metrics for the highest-level system that is exhibiting problems.These metrics will usually set the direction for your investigation. For example, if the
percentage of work that is successfully processed drops, diving into error metrics, and especially the types of errors being returned, will often help narrow your focus.
2 Dig into resources
Next examine the system’s resources—physical resources as well as services that support the system. Well-designed dashboards (see below) enable you to quickly scan
relevant resource metrics for each system. Are those resources unavailable? Are they highly utilized or saturated? If so, recurse into those resources and begin investigating
each of them at step 1.
3 Did something change?
Next consider events that may be correlated with your metrics. Look for code releases, internal alerts, or other events that were recorded just before the problem developed.
4 Fix it (and don’t forget it)
Once you have determined what caused the issue, correct it. Your investigation is complete when symptoms disappear—you can now think about how to avoid similar
problems in the future.
